package com.revature.services;

import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.sql.Connection;
import java.sql.SQLException;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import com.revature.dao.ManagerDAO;
import com.revature.exceptions.ManagerNotFoundException;
import com.revature.model.Manager;
import com.revature.util.ConnectionUtil;

public class ManagerServiceTest {
	ManagerService managerService;
	public static Connection mockConnection;
	public static MockedStatic<ConnectionUtil> mockedStatic;
	public static ManagerDAO managerDAO;
	
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		managerDAO = mock(ManagerDAO.class);
		mockConnection = mock(Connection.class);
		
		Manager manager = new Manager(1, "mrmanager", "password", "Mister", "Manager", "mrmanager@gmail.com");
		when(managerDAO.logInVerification(eq("mrmanager"), eq("password"), eq(mockConnection))).thenReturn(manager);
	}
	
	@Before
	public void setUp() throws Exception {
		managerService = new ManagerService(managerDAO);
	}
	
	@Test
	public void testValidLogIn() throws SQLException, ManagerNotFoundException {
		try (MockedStatic<ConnectionUtil> mockedStatic = Mockito.mockStatic(ConnectionUtil.class)) {
			mockedStatic.when(ConnectionUtil::getConnection).thenReturn(mockConnection);
	
		}
	}
}